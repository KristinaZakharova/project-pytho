# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

path, vyr, stavka, premia = argv
vyr, stavka, premia = map(int, argv[1:])

zp = (vyr * stavka) + premia
print('zarplta  = ', zp)
#
# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.

old = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(old)
new = [old[i] for i in range(1, len(old) - 1) if old[i] > old[i - 1]]
print(new)

3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку

new = [i for i in range(19, 241) if i % 20 == 0 or i % 21 == 0]
print(new)

# 4. Представлен список чисел. Определите элементы списка,
# не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
#
li = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new = [x for x in li if li.count(x) == 1]

print(new)
#
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.

from functools import reduce

li = [i for i in range(100, 1000 + 1) if i % 2 == 0]


def umn(a, b):
    return a * b


print(reduce(umn, li))

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;

from itertools import cycle, count
from sys import argv
x = argv
x = int(argv[1])
n = 0
for el in count(x):
    print(el)
    n += 1
    if n == 10:
        break


# итератор, повторяющий элементы некоторого списка, определённого заранее
#
from sys import argv
from itertools import cycle, count
x = argv
del x[0]
n = 0
for el in cycle(x):
    print(el)
    n += 1
    if n == 10:
        break



# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.



def fact(n):
    for i in range(1, n + 1):
        f = i
        while i > 1:
            f = f * (i - 1)
            i -= 1
        yield f

def fact_1(n): # короче и изящнее
    f = 1
    for i in range(1, n + 1):
        f = f * i
        yield f
n = int(input('введите целое положительное число '))
for el in fact(n):
    print(el)
for el in fact_1(n):
    print(el)


